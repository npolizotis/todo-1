// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlite

import (
	"context"
)

const addTodo = `-- name: AddTodo :exec
insert into todo (id,task,created,updated,complete,rank) 
 values (?,?,?,?,?,?)
`

type AddTodoParams struct {
	ID       string
	Task     string
	Created  int64
	Updated  int64
	Complete string
	Rank     int64
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) error {
	_, err := q.db.ExecContext(ctx, addTodo,
		arg.ID,
		arg.Task,
		arg.Created,
		arg.Updated,
		arg.Complete,
		arg.Rank,
	)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
delete from todo where id=?
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const empty = `-- name: Empty :exec
delete from todo
`

func (q *Queries) Empty(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, empty)
	return err
}

const getTodo = `-- name: GetTodo :one
 select id, task, created, updated, complete, rank
 from todo
 where id=?
`

func (q *Queries) GetTodo(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Created,
		&i.Updated,
		&i.Complete,
		&i.Rank,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
select id, task, created, updated, complete, rank
from todo
order by rank asc
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Created,
			&i.Updated,
			&i.Complete,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameTodo = `-- name: RenameTodo :exec
 update todo 
 set task= ?, updated=?
 where id=?
`

type RenameTodoParams struct {
	Task    string
	Updated int64
	ID      string
}

func (q *Queries) RenameTodo(ctx context.Context, arg RenameTodoParams) error {
	_, err := q.db.ExecContext(ctx, renameTodo, arg.Task, arg.Updated, arg.ID)
	return err
}

const search = `-- name: Search :many
select id, task, created, updated, complete, rank
from todo
where task like ?
order by rank asc
`

func (q *Queries) Search(ctx context.Context, task string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, search, task)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Created,
			&i.Updated,
			&i.Complete,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTodoComplete = `-- name: ToggleTodoComplete :exec
update todo 
set complete=(case complete when 'Y' then 'N' else 'Y' end)
where id=?
`

func (q *Queries) ToggleTodoComplete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, toggleTodoComplete, id)
	return err
}

const updateRank = `-- name: UpdateRank :exec
update todo
set rank=?
where id=?
`

type UpdateRankParams struct {
	Rank int64
	ID   string
}

func (q *Queries) UpdateRank(ctx context.Context, arg UpdateRankParams) error {
	_, err := q.db.ExecContext(ctx, updateRank, arg.Rank, arg.ID)
	return err
}
